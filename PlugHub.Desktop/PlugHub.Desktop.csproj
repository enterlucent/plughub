<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <OutputType>WinExe</OutputType>
    <!--If you are willing to use Windows/MacOS native APIs you will need to create 3 projects.
    One for Windows with net8.0-windows TFM, one for MacOS with net8.0-macos and one with net8.0 TFM for Linux.-->
    <TargetFramework>net8.0</TargetFramework>
    <BuiltInComInteropSupport>true</BuiltInComInteropSupport>
    <PublishSingleFile>true</PublishSingleFile>
    <SelfContained>true</SelfContained>
    <IncludeNativeLibrariesForSelfExtract>true</IncludeNativeLibrariesForSelfExtract>
    <Nullable>enable</Nullable>
    <RuntimeIdentifiers>win-x64;linux-x64;osx-x64</RuntimeIdentifiers>
    <AvaloniaUseCompiledBindingsByDefault>false</AvaloniaUseCompiledBindingsByDefault>
  </PropertyGroup>

  <PropertyGroup>
    <ApplicationManifest>app.manifest</ApplicationManifest>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Avalonia.Desktop" Version="11.3.2" />
    <!--Condition below is needed to remove Avalonia.Diagnostics package from build output in Release configuration.-->
    <PackageReference Include="Avalonia.Diagnostics" Version="11.3.2">
      <IncludeAssets Condition="'$(Configuration)' != 'Debug'">None</IncludeAssets>
      <PrivateAssets Condition="'$(Configuration)' != 'Debug'">All</PrivateAssets>
    </PackageReference>
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\PlugHub\PlugHub.csproj" />
  </ItemGroup>


  <!-- Custom Official Plugin Handling -->
  <ItemGroup>
    <Content Update="..\PlugHub.Plugins\**\PlugHub.Plugin.*">
      <ExcludeFromSingleFile>true</ExcludeFromSingleFile>
    </Content>
  </ItemGroup>

  <PropertyGroup>
    <IsPublishing Condition="'$(PublishDir)' != '' or '$(PublishProfile)' != '' or '$(DeployOnBuild)' == 'true'">true</IsPublishing>
    <IsPublishing Condition="'$(PublishDir)' == '' and '$(PublishProfile)' == '' and '$(DeployOnBuild)' != 'true'">false</IsPublishing>
  </PropertyGroup>

  <Target Name="BuildReleasePlugins" BeforeTargets="PrepareForPublish" Condition="'$(IsPublishing)' == 'true'">
    <Message Text="Building Release plugin projects..." Importance="high" />
    <ItemGroup>
      <PluginSharedProjects Include="..\PlugHub.Plugins\**\PlugHub.Shared.*\*.csproj" />
    </ItemGroup>
    <MSBuild Projects="@(PluginSharedProjects)" Targets="Build" Properties="Configuration=Release;Restore=true" />
    <ItemGroup>
      <PluginImplProjects Include="..\PlugHub.Plugins\**\PlugHub.Plugin.*\*.csproj" />
    </ItemGroup>
    <MSBuild Projects="@(PluginImplProjects)" Targets="Build" Properties="Configuration=Release;Restore=true" />
  </Target>

  <Target Name="CopyPluginArtifactsOnPublish" AfterTargets="Publish" DependsOnTargets="BuildReleasePlugins" Condition="'$(IsPublishing)' == 'true'">
    <Message Text="Copying plugin artifacts to publish output..." Importance="high" />
    <ItemGroup>
      <PluginArtifactsRaw Include="..\PlugHub.Plugins\**\PlugHub.Plugin.*\bin\Release\net8.0\**\*" Exclude="..\PlugHub.Plugins\**\PlugHub.Plugin.*\bin\Release\net8.0\**\PlugHub.Shared.dll;..\PlugHub.Plugins\**\PlugHub.Plugin.*\bin\Release\net8.0\**\PlugHub.Shared.pdb" />
    </ItemGroup>
    <ItemGroup>
      <PluginArtifacts Include="@(PluginArtifactsRaw)">
        <PluginName>$([System.Text.RegularExpressions.Regex]::Match('%(PluginArtifactsRaw.Identity)', 'PlugHub\.Plugins\\(.+?)\\bin').Groups[1].Value)</PluginName>
      </PluginArtifacts>
    </ItemGroup>
    <Copy SourceFiles="@(PluginArtifacts)" DestinationFiles="@(PluginArtifacts->'$(PublishDir)Plugins\%(PluginName)\%(Filename)%(Extension)')" SkipUnchangedFiles="true" />
  </Target>

  <Target Name="BuildConfigurationPlugins" BeforeTargets="PrepareForBuild" Condition="'$(IsPublishing)' == 'false'">
    <Message Text="Building $(Configuration) plugin projects..." Importance="high" />
    <ItemGroup>
      <PluginSharedProjects Include="..\PlugHub.Plugins\**\PlugHub.Shared.*\*.csproj" />
    </ItemGroup>
    <MSBuild Projects="@(PluginSharedProjects)" Targets="Build" Properties="Configuration=$(Configuration);Restore=true" />
    <ItemGroup>
      <PluginImplProjects Include="..\PlugHub.Plugins\**\PlugHub.Plugin.*\*.csproj" />
    </ItemGroup>
    <MSBuild Projects="@(PluginImplProjects)" Targets="Build" Properties="Configuration=$(Configuration);Restore=true" />
  </Target>

  <Target Name="CopyPluginArtifactsOnBuild" AfterTargets="Build" DependsOnTargets="BuildConfigurationPlugins" Condition="'$(IsPublishing)' == 'false'">
    <Message Text="Copying plugin artifacts to build output..." Importance="high" />
    <ItemGroup>
      <PluginArtifactsRaw Include="..\PlugHub.Plugins\**\PlugHub.Plugin.*\bin\$(Configuration)\**\*" Exclude="..\PlugHub.Plugins\**\PlugHub.Plugin.*\bin\$(Configuration)\**\PlugHub.Shared.dll;..\PlugHub.Plugins\**\PlugHub.Plugin.*\bin\$(Configuration)\**\PlugHub.Shared.pdb" />
    </ItemGroup>
    <ItemGroup>
      <PluginArtifacts Include="@(PluginArtifactsRaw)">
        <PluginName>$([System.Text.RegularExpressions.Regex]::Match('%(PluginArtifactsRaw.Identity)', 'PlugHub\.Plugins\\(.+?)\\bin').Groups[1].Value)</PluginName>
      </PluginArtifacts>
    </ItemGroup>
    <Copy SourceFiles="@(PluginArtifacts)" DestinationFiles="@(PluginArtifacts->'$(OutputPath)Plugins\%(PluginName)\%(Filename)%(Extension)')" SkipUnchangedFiles="true" />
  </Target>

</Project>