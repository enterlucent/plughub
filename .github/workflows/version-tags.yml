name: PlugHub Desktop Release

permissions:
  contents: write

on:
  push:
    tags:
      - 'v[0-9]*.[0-9]*.[0-9]*'  # Only run on tags matching e.g. v1.2.3

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: windows-latest
            rid: win-x64
            artifact_name: PlugHub-Desktop-win-x64.zip
          - os: ubuntu-latest
            rid: linux-x64
            artifact_name: PlugHub-Desktop-linux-x64.zip
          - os: macos-latest
            rid: osx-x64
            artifact_name: PlugHub-Desktop-osx-x64.zip

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository (with LFS)
        uses: actions/checkout@v4
        with:
          lfs: true
      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      - name: Restore all projects
        run: dotnet restore PlugHub.sln
      - name: Build (Release)
        run: dotnet build --configuration Release -maxcpucount:1
      - name: Test
        run: dotnet test --configuration Release --no-build --verbosity normal
      - name: Publish self-contained app (${{ matrix.rid }})
        run: |
          dotnet publish PlugHub.Desktop/PlugHub.Desktop.csproj \
            -c Release \
            -r ${{ matrix.rid }} \
            --self-contained true \
            -p:PublishSingleFile=true \
            -p:IncludeNativeLibrariesForSelfExtract=true \
            -p:PublishTrimmed=false \
            -o ./publish/${{ matrix.rid }} \
            -maxcpucount:1
        shell: bash
      - name: Compress published files (cross-platform)
        uses: thedoctor0/zip-release@0.7.5
        with:
          type: 'zip'
          filename: ${{ matrix.artifact_name }}
          path: ./publish/${{ matrix.rid }} 
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.artifact_name }}

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref_type == 'tag'
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
      - name: List artifacts
        run: ls -R ./artifacts
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ./artifacts/**/*.zip
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
